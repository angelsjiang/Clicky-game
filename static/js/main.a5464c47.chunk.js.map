{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/jumbotron/index.js","components/BodyWrapper/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","onClick","clickImage","id","alt","name","src","image","Wrapper","children","Nav","title","Jumbotron","alert","alertText","score","highest","BodyWrapper","Footer","App","state","characters","initial","win","lose","i","_this","length","char","setScoreZero","resetImageCards","click","setState","increment","shuffleOrder","usrScore","highestScore","console","log","j","Math","floor","random","temp","_this2","this","components_Wrapper","Title","jumbotron","components_BodyWrapper","map","character","components_ImageCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5464c47.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n    return (\n        <div className=\"imageCard\">\n            <span onClick={() => props.clickImage(props.id)} className=\"counted\">\n                <img className=\"rounded img-thumbnail\" alt={props.name} src={props.image} />\n            </span>\n        </div>\n    );\n}\n\nexport default ImageCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-info\">\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"navbar-brand title\">{props.title}</li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n    return(\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Clicky Game</h1>\n                <p className=\"lead\">{props.alert}</p>\n                <p className=\"alertText\">{props.alertText}</p>\n                <p className=\"score\">Score: {props.score} | Highest Score: {props.highest}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction BodyWrapper(props) {\n    return <div className = \"bodyWrapper\">{props.children}</div>;\n}\n\nexport default BodyWrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer(props) {\n    return(\n        <footer className=\"footer\">\n            <div className=\"container\">\n                <span>Copyright@ Shulin Jiang</span>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Title\";\nimport characters from \"./characters.json\";\nimport Jumbotron from \"./components/jumbotron\";\nimport BodyWrapper from \"./components/BodyWrapper\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n\n  state = {\n    characters,\n    alert: 'Click on an image to begin!',\n    score: 0,\n    highest: 0,\n  };\n\n  alert = {\n    initial: \"Click an image to begin!\",\n    win: \"You guessed correctly!\",\n    lose: \"You have already clicked this image!\"\n  };\n\n  score = {\n    initial: 0,\n    highest: 0\n  }\n\n  clickImage = (id) => {\n    \n    for(var i = 0; i < this.state.characters.length; i++) {\n\n      if(this.state.characters[i].id === id) {\n        const char = this.state.characters[i];\n        \n        if(this.state.score >= 12) {\n          alert(\"You got it!\");\n          this.setScoreZero();\n          this.resetImageCards();\n        }\n        else if (char.click <= 0) {\n          this.setState({ alert: this.alert.win });\n          char.click++;\n          this.setState({char});\n          this.increment(id);\n        }\n        else{\n          this.setState({ alert: this.alert.lose });\n          this.setScoreZero();\n          this.resetImageCards();\n          alert(\"Uh oh, you clicked on the same image...\");\n        }\n      }\n    }\n    this.shuffleOrder();\n  };\n\n  increment = (id) => {\n    // change score\n    let usrScore = this.state.score;\n    usrScore++;\n    this.setState({ score: usrScore });\n    // change highest score\n    let highestScore = this.state.highest;\n    console.log(usrScore, highestScore);\n    if(usrScore > highestScore) {\n      console.log(\"hi?\");\n      highestScore = usrScore;\n      this.setState({ highest: highestScore });\n    }\n  }\n\n  setScoreZero = () => {\n    this.setState({ score: 0 });\n    }\n\n  resetImageCards = () => {\n    const characters = this.state.characters;\n\n    for(var i = 0; i < characters.length; i++) {\n      characters[i].click = 0;\n    };\n\n    this.setState({ characters });\n  }\n\n  shuffleOrder = () => {\n    const { characters } = this.state;\n    let i = characters.length - 1;\n    for(; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = characters[i];\n      characters[i] = characters[j];\n      characters[j] = temp;\n    }\n\n    this.setState({ characters });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Clicky Game\"\n        ></Nav>\n        <Jumbotron\n          alertText={this.state.alert}\n          score={this.state.score}\n          highest={this.state.highest}\n        ></Jumbotron>\n        <BodyWrapper>\n          {this.state.characters.map((character) => (\n            <ImageCard\n              clickImage = {this.clickImage}\n              id = {character.id}\n              key = {character.id}\n              name = {character.name}\n              image = {character.image}\n              click = {character.click}\n            />\n          ))}\n        </BodyWrapper>\n        <Footer></Footer>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}